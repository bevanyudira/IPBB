/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import useSwr from 'swr';
import type {
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import type {
  ErrorResponse,
  ExistsResponse,
  HTTPValidationError,
  NopRequest,
  OpGetSpopListParams,
  SpopCreateRequest,
  SpopDetailResponse,
  SpopListPaginatedResponse,
  SpopUpdateRequest,
  SpptPaymentResponse,
  SpptResponse,
  SpptYearsResponse,
  VerifikasiRequest
} from '../../models';

import { clientFetcher } from '../../../../lib/orval/mutator';
import type { ErrorType , BodyType } from '../../../../lib/orval/mutator';


  
  type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  
/**
 * @summary Verifikasi
 */
export const opVerifikasi = (
    verifikasiRequest: BodyType<VerifikasiRequest>,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<ExistsResponse>(
    {url: `/op/verifikasi`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: verifikasiRequest
    },
    options);
  }



export const getOpVerifikasiMutationFetcher = ( options?: SecondParameter<typeof clientFetcher>) => {
  return (_: Key, { arg }: { arg: VerifikasiRequest }): Promise<ExistsResponse> => {
    return opVerifikasi(arg, options);
  }
}
export const getOpVerifikasiMutationKey = () => [`/op/verifikasi`] as const;

export type OpVerifikasiMutationResult = NonNullable<Awaited<ReturnType<typeof opVerifikasi>>>
export type OpVerifikasiMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Verifikasi
 */
export const useOpVerifikasi = <TError = ErrorType<HTTPValidationError>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof opVerifikasi>>, TError, Key, VerifikasiRequest, Awaited<ReturnType<typeof opVerifikasi>>> & { swrKey?: string }, request?: SecondParameter<typeof clientFetcher>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getOpVerifikasiMutationKey();
  const swrFn = getOpVerifikasiMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * List all SPOP dengan info Nama WP dan Status Pembayaran.
Menampilkan: NOP, Nama Wajib Pajak, Status Pembayaran
 * @summary Get Spop List
 */
export const opGetSpopList = (
    params?: OpGetSpopListParams,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<SpopListPaginatedResponse>(
    {url: `/op/spop`, method: 'GET',
        params
    },
    options);
  }



export const getOpGetSpopListKey = (params?: OpGetSpopListParams,) => [`/op/spop`, ...(params ? [params]: [])] as const;

export type OpGetSpopListQueryResult = NonNullable<Awaited<ReturnType<typeof opGetSpopList>>>
export type OpGetSpopListQueryError = ErrorType<HTTPValidationError>

/**
 * @summary Get Spop List
 */
export const useOpGetSpopList = <TError = ErrorType<HTTPValidationError>>(
  params?: OpGetSpopListParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof opGetSpopList>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getOpGetSpopListKey(params) : null);
  const swrFn = () => opGetSpopList(params, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Create SPOP baru
 * @summary Create Spop
 */
export const opCreateSpop = (
    spopCreateRequest: BodyType<SpopCreateRequest>,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<unknown>(
    {url: `/op/spop`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: spopCreateRequest
    },
    options);
  }



export const getOpCreateSpopMutationFetcher = ( options?: SecondParameter<typeof clientFetcher>) => {
  return (_: Key, { arg }: { arg: SpopCreateRequest }): Promise<unknown> => {
    return opCreateSpop(arg, options);
  }
}
export const getOpCreateSpopMutationKey = () => [`/op/spop`] as const;

export type OpCreateSpopMutationResult = NonNullable<Awaited<ReturnType<typeof opCreateSpop>>>
export type OpCreateSpopMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Create Spop
 */
export const useOpCreateSpop = <TError = ErrorType<HTTPValidationError>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof opCreateSpop>>, TError, Key, SpopCreateRequest, Awaited<ReturnType<typeof opCreateSpop>>> & { swrKey?: string }, request?: SecondParameter<typeof clientFetcher>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getOpCreateSpopMutationKey();
  const swrFn = getOpCreateSpopMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * @summary Get Sppt
 */
export const opGetSppt = (
    
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<ErrorResponse>(
    {url: `/op/`, method: 'GET'
    },
    options);
  }



export const getOpGetSpptKey = () => [`/op/`] as const;

export type OpGetSpptQueryResult = NonNullable<Awaited<ReturnType<typeof opGetSppt>>>
export type OpGetSpptQueryError = ErrorType<unknown>

/**
 * @summary Get Sppt
 */
export const useOpGetSppt = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof opGetSppt>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getOpGetSpptKey() : null);
  const swrFn = () => opGetSppt(requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get available SPPT years for a specific object (NOP). Pass the NOP as JSON body.
 * @summary Get Sppt Years
 */
export const opGetSpptYears = (
    nopRequest: BodyType<NopRequest>,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<SpptYearsResponse>(
    {url: `/op/sppt/years`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: nopRequest
    },
    options);
  }



export const getOpGetSpptYearsMutationFetcher = ( options?: SecondParameter<typeof clientFetcher>) => {
  return (_: Key, { arg }: { arg: NopRequest }): Promise<SpptYearsResponse> => {
    return opGetSpptYears(arg, options);
  }
}
export const getOpGetSpptYearsMutationKey = () => [`/op/sppt/years`] as const;

export type OpGetSpptYearsMutationResult = NonNullable<Awaited<ReturnType<typeof opGetSpptYears>>>
export type OpGetSpptYearsMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Get Sppt Years
 */
export const useOpGetSpptYears = <TError = ErrorType<HTTPValidationError>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof opGetSpptYears>>, TError, Key, NopRequest, Awaited<ReturnType<typeof opGetSpptYears>>> & { swrKey?: string }, request?: SecondParameter<typeof clientFetcher>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getOpGetSpptYearsMutationKey();
  const swrFn = getOpGetSpptYearsMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get payment information for a specific SPPT. Returns grouped payment data with totals.
 * @summary Get Sppt Payment Detail V2
 */
export const opGetSpptPaymentDetailV2 = (
    year: string,
    nop: string,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<SpptPaymentResponse>(
    {url: `/op/sppt/${year}/${nop}/payment`, method: 'GET'
    },
    options);
  }



export const getOpGetSpptPaymentDetailV2Key = (year: string,
    nop: string,) => [`/op/sppt/${year}/${nop}/payment`] as const;

export type OpGetSpptPaymentDetailV2QueryResult = NonNullable<Awaited<ReturnType<typeof opGetSpptPaymentDetailV2>>>
export type OpGetSpptPaymentDetailV2QueryError = ErrorType<HTTPValidationError>

/**
 * @summary Get Sppt Payment Detail V2
 */
export const useOpGetSpptPaymentDetailV2 = <TError = ErrorType<HTTPValidationError>>(
  year: string,
    nop: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof opGetSpptPaymentDetailV2>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(year && nop)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getOpGetSpptPaymentDetailV2Key(year,nop) : null);
  const swrFn = () => opGetSpptPaymentDetailV2(year,nop, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get payment information for all years of a specific NOP in one request.
Much faster than calling /sppt/{year}/{nop}/payment multiple times.
 * @summary Get Sppt Batch Payment
 */
export const opGetSpptBatchPayment = (
    nop: string,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<SpptPaymentResponse[]>(
    {url: `/op/sppt/batch/${nop}/payment`, method: 'GET'
    },
    options);
  }



export const getOpGetSpptBatchPaymentKey = (nop: string,) => [`/op/sppt/batch/${nop}/payment`] as const;

export type OpGetSpptBatchPaymentQueryResult = NonNullable<Awaited<ReturnType<typeof opGetSpptBatchPayment>>>
export type OpGetSpptBatchPaymentQueryError = ErrorType<HTTPValidationError>

/**
 * @summary Get Sppt Batch Payment
 */
export const useOpGetSpptBatchPayment = <TError = ErrorType<HTTPValidationError>>(
  nop: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof opGetSpptBatchPayment>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(nop)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getOpGetSpptBatchPaymentKey(nop) : null);
  const swrFn = () => opGetSpptBatchPayment(nop, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get comprehensive object information including taxpayer details, location, and property values.
 * @summary Get Object Info
 */
export const opGetObjectInfo = (
    nop: string,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<unknown>(
    {url: `/op/sppt/${nop}/info`, method: 'GET'
    },
    options);
  }



export const getOpGetObjectInfoKey = (nop: string,) => [`/op/sppt/${nop}/info`] as const;

export type OpGetObjectInfoQueryResult = NonNullable<Awaited<ReturnType<typeof opGetObjectInfo>>>
export type OpGetObjectInfoQueryError = ErrorType<HTTPValidationError>

/**
 * @summary Get Object Info
 */
export const useOpGetObjectInfo = <TError = ErrorType<HTTPValidationError>>(
  nop: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof opGetObjectInfo>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(nop)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getOpGetObjectInfoKey(nop) : null);
  const swrFn = () => opGetObjectInfo(nop, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get detailed SPPT data for a specific property (object) and year. Use after selecting object and year. NOP is a single string.
 * @summary Get Sppt Detail
 */
export const opGetSpptDetail = (
    year: string,
    nop: string,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<SpptResponse>(
    {url: `/op/sppt/${year}/${nop}`, method: 'GET'
    },
    options);
  }



export const getOpGetSpptDetailKey = (year: string,
    nop: string,) => [`/op/sppt/${year}/${nop}`] as const;

export type OpGetSpptDetailQueryResult = NonNullable<Awaited<ReturnType<typeof opGetSpptDetail>>>
export type OpGetSpptDetailQueryError = ErrorType<HTTPValidationError>

/**
 * @summary Get Sppt Detail
 */
export const useOpGetSpptDetail = <TError = ErrorType<HTTPValidationError>>(
  year: string,
    nop: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof opGetSpptDetail>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(year && nop)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getOpGetSpptDetailKey(year,nop) : null);
  const swrFn = () => opGetSpptDetail(year,nop, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get all SPPT data with payment information in one optimized query.
Returns SPPT LEFT JOIN pembayaran_sppt for a specific NOP.
This is much faster than making separate calls.
 * @summary Get Sppt With Payments By Nop
 */
export const opGetSpptWithPaymentsByNop = (
    nop: string,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<unknown>(
    {url: `/op/sppt/batch/${nop}/complete`, method: 'GET'
    },
    options);
  }



export const getOpGetSpptWithPaymentsByNopKey = (nop: string,) => [`/op/sppt/batch/${nop}/complete`] as const;

export type OpGetSpptWithPaymentsByNopQueryResult = NonNullable<Awaited<ReturnType<typeof opGetSpptWithPaymentsByNop>>>
export type OpGetSpptWithPaymentsByNopQueryError = ErrorType<HTTPValidationError>

/**
 * @summary Get Sppt With Payments By Nop
 */
export const useOpGetSpptWithPaymentsByNop = <TError = ErrorType<HTTPValidationError>>(
  nop: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof opGetSpptWithPaymentsByNop>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(nop)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getOpGetSpptWithPaymentsByNopKey(nop) : null);
  const swrFn = () => opGetSpptWithPaymentsByNop(nop, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get all SPPT data for all available years for a specific NOP in one request.
Much faster than multiple individual requests.
 * @summary Get Sppt Batch By Nop
 */
export const opGetSpptBatchByNop = (
    nop: string,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<SpptResponse[]>(
    {url: `/op/sppt/batch/${nop}`, method: 'GET'
    },
    options);
  }



export const getOpGetSpptBatchByNopKey = (nop: string,) => [`/op/sppt/batch/${nop}`] as const;

export type OpGetSpptBatchByNopQueryResult = NonNullable<Awaited<ReturnType<typeof opGetSpptBatchByNop>>>
export type OpGetSpptBatchByNopQueryError = ErrorType<HTTPValidationError>

/**
 * @summary Get Sppt Batch By Nop
 */
export const useOpGetSpptBatchByNop = <TError = ErrorType<HTTPValidationError>>(
  nop: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof opGetSpptBatchByNop>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(nop)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getOpGetSpptBatchByNopKey(nop) : null);
  const swrFn = () => opGetSpptBatchByNop(nop, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Get detail SPOP by NOP (18 digit) untuk edit form
 * @summary Get Spop Detail
 */
export const opGetSpopDetail = (
    nop: string,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<SpopDetailResponse>(
    {url: `/op/spop/${nop}`, method: 'GET'
    },
    options);
  }



export const getOpGetSpopDetailKey = (nop: string,) => [`/op/spop/${nop}`] as const;

export type OpGetSpopDetailQueryResult = NonNullable<Awaited<ReturnType<typeof opGetSpopDetail>>>
export type OpGetSpopDetailQueryError = ErrorType<HTTPValidationError>

/**
 * @summary Get Spop Detail
 */
export const useOpGetSpopDetail = <TError = ErrorType<HTTPValidationError>>(
  nop: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof opGetSpopDetail>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof clientFetcher> }
) => {
  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(nop)
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getOpGetSpopDetailKey(nop) : null);
  const swrFn = () => opGetSpopDetail(nop, requestOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
/**
 * Update SPOP by NOP (18 digit)
Hanya update field yang dikirim (non-null)
 * @summary Update Spop
 */
export const opUpdateSpop = (
    nop: string,
    spopUpdateRequest: BodyType<SpopUpdateRequest>,
 options?: SecondParameter<typeof clientFetcher>) => {
    return clientFetcher<unknown>(
    {url: `/op/spop/${nop}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: spopUpdateRequest
    },
    options);
  }



export const getOpUpdateSpopMutationFetcher = (nop: string, options?: SecondParameter<typeof clientFetcher>) => {
  return (_: Key, { arg }: { arg: SpopUpdateRequest }): Promise<unknown> => {
    return opUpdateSpop(nop, arg, options);
  }
}
export const getOpUpdateSpopMutationKey = (nop: string,) => [`/op/spop/${nop}`] as const;

export type OpUpdateSpopMutationResult = NonNullable<Awaited<ReturnType<typeof opUpdateSpop>>>
export type OpUpdateSpopMutationError = ErrorType<HTTPValidationError>

/**
 * @summary Update Spop
 */
export const useOpUpdateSpop = <TError = ErrorType<HTTPValidationError>>(
  nop: string, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof opUpdateSpop>>, TError, Key, SpopUpdateRequest, Awaited<ReturnType<typeof opUpdateSpop>>> & { swrKey?: string }, request?: SecondParameter<typeof clientFetcher>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getOpUpdateSpopMutationKey(nop);
  const swrFn = getOpUpdateSpopMutationFetcher(nop, requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
